{
  "name": "text-07",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "text"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+\";\n\ninterface AnimatedTextProps {\n    text?: string;\n    className?: string;\n    duration?: number;\n    interval?: number;\n    iterationsPerChar?: number;\n    repeat?: boolean;\n    repeatDelay?: number; // Delay before repeating\n}\n\nexport default function Text_07({\n    text = \"Reveal\",\n    className = \"\",\n    duration = 2000,\n    interval = 50,\n    iterationsPerChar = 6,\n    repeat = false,\n    repeatDelay = 2000,\n}: AnimatedTextProps) {\n    const [displayedText, setDisplayedText] = useState(text);\n\n    useEffect(() => {\n        let timeoutId: NodeJS.Timeout;\n        let repeatTimeoutId: NodeJS.Timeout;\n        let intervals: NodeJS.Timer[] = [];\n\n        function startAnimation() {\n            const frames = new Array(text.length).fill(0);\n            setDisplayedText(\n                text\n                    .split(\"\")\n                    .map(\n                        () =>\n                            characters[\n                                Math.floor(Math.random() * characters.length)\n                            ]\n                    )\n                    .join(\"\")\n            );\n\n            const intervals = text.split(\"\").map((targetChar, index) => {\n                return setInterval(() => {\n                    frames[index]++;\n\n                    setDisplayedText((prev) => {\n                        const chars = prev.split(\"\");\n                        if (frames[index] < iterationsPerChar) {\n                            chars[index] =\n                                characters[\n                                    Math.floor(\n                                        Math.random() * characters.length\n                                    )\n                                ];\n                        } else {\n                            chars[index] = targetChar;\n                        }\n                        return chars.join(\"\");\n                    });\n                }, interval);\n            });\n\n            return intervals;\n        }\n\n        if (repeat) {\n            const runAnimation = () => {\n                intervals = startAnimation();\n\n                timeoutId = setTimeout(() => {\n                    intervals.forEach((interval) => clearInterval(interval));\n                    setDisplayedText(text);\n\n                    repeatTimeoutId = setTimeout(() => {\n                        runAnimation();\n                    }, repeatDelay);\n                }, duration);\n            };\n\n            runAnimation();\n        } else {\n            intervals = startAnimation();\n            timeoutId = setTimeout(() => {\n                intervals.forEach((interval) => clearInterval(interval));\n                setDisplayedText(text);\n            }, duration);\n        }\n\n        return () => {\n            intervals.forEach((interval) => clearInterval(interval));\n            clearTimeout(timeoutId);\n            if (repeat) clearTimeout(repeatTimeoutId);\n        };\n    }, [text, duration, interval, iterationsPerChar, repeat, repeatDelay]);\n\n    return (\n        <motion.h1\n            className={`text-4xl font-bold w-full text-center ${className}`}\n            aria-label={text}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{\n                duration: 0.4,\n                ease: \"easeOut\",\n            }}\n        >\n            {displayedText}\n        </motion.h1>\n    );\n}\n",
      "path": "components/text-07.tsx",
      "target": "components/components/text-07.tsx"
    }
  ]
}