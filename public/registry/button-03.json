{
  "name": "button-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { Magnet } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface Btn03Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    particleCount?: number;\n    attractRadius?: number;\n}\n\ninterface Particle {\n    id: number;\n    x: number;\n    y: number;\n}\n\nexport function Btn03({\n    className,\n    particleCount = 12,\n    attractRadius = 100,\n    ...props\n}: Btn03Props) {\n    const [isAttracting, setIsAttracting] = useState(false);\n    const [particles, setParticles] = useState<Particle[]>([]);\n    const particlesControl = useAnimation();\n\n    // Generate random particles\n    useEffect(() => {\n        const newParticles = Array.from({ length: particleCount }, (_, i) => ({\n            id: i,\n            x: Math.random() * 360 - 180, // Random position between -180 and 180\n            y: Math.random() * 360 - 180,\n        }));\n        setParticles(newParticles);\n    }, [particleCount]);\n\n    async function handleMouseEnter() {\n        setIsAttracting(true);\n        // Attract particles\n        await particlesControl.start({\n            x: 0,\n            y: 0,\n            transition: {\n                type: \"spring\",\n                stiffness: 50,\n                damping: 10,\n            },\n        });\n    }\n\n    async function handleMouseLeave() {\n        setIsAttracting(false);\n        // Repel particles\n        await particlesControl.start((i) => ({\n            x: particles[i].x,\n            y: particles[i].y,\n            transition: {\n                type: \"spring\",\n                stiffness: 100,\n                damping: 15,\n            },\n        }));\n    }\n\n    return (\n        <Button\n            className={cn(\n                \"min-w-40 relative\",\n                \"bg-violet-100 dark:bg-violet-900\",\n                \"hover:bg-violet-200 dark:hover:bg-violet-800\",\n                \"text-violet-600 dark:text-violet-300\",\n                \"border border-violet-300 dark:border-violet-700\",\n                \"transition-all duration-300\",\n                className\n            )}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            {...props}\n        >\n            {particles.map((_, index) => (\n                <motion.div\n                    key={index}\n                    custom={index}\n                    initial={{ x: particles[index].x, y: particles[index].y }}\n                    animate={particlesControl}\n                    className={cn(\n                        \"absolute w-1.5 h-1.5 rounded-full\",\n                        \"bg-violet-400 dark:bg-violet-300\",\n                        \"transition-opacity duration-300\",\n                        isAttracting ? \"opacity-100\" : \"opacity-40\"\n                    )}\n                />\n            ))}\n            <span className=\"relative z-10 w-full flex items-center justify-center gap-2\">\n                <Magnet className={cn(\n                    \"w-4 h-4 transition-transform duration-300\",\n                    isAttracting && \"scale-110\"\n                )} />\n                {isAttracting ? \"Attracting\" : \"Hover me\"}\n            </span>\n        </Button>\n    );\n}\n",
      "path": "components/btn-03.tsx",
      "target": "components/components/btn-03.tsx"
    }
  ]
}