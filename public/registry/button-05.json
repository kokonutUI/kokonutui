{
  "name": "button-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { Zap } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Btn05Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    glitchIntensity?: number;\n    glitchDuration?: number;\n}\n\nexport function Btn05({\n    className,\n    glitchIntensity = 10,\n    glitchDuration = 1500,\n    ...props\n}: Btn05Props) {\n    const [isGlitching, setIsGlitching] = useState(false);\n    const redLayerControls = useAnimation();\n    const blueLayerControls = useAnimation();\n    const greenLayerControls = useAnimation();\n\n    async function triggerGlitch() {\n        if (isGlitching) return;\n        setIsGlitching(true);\n\n        // Generate random offsets for RGB layers\n        const generateOffset = () => ({\n            x: (Math.random() - 0.5) * glitchIntensity,\n            y: (Math.random() - 0.5) * glitchIntensity,\n        });\n\n        // Animate RGB layers with random positions\n        for (let i = 0; i < 3; i++) {\n            await Promise.all([\n                redLayerControls.start({\n                    ...generateOffset(),\n                    transition: { duration: 0.1 }\n                }),\n                blueLayerControls.start({\n                    ...generateOffset(),\n                    transition: { duration: 0.1 }\n                }),\n                greenLayerControls.start({\n                    ...generateOffset(),\n                    transition: { duration: 0.1 }\n                })\n            ]);\n        }\n\n        // Reset positions\n        await Promise.all([\n            redLayerControls.start({ x: 0, y: 0 }),\n            blueLayerControls.start({ x: 0, y: 0 }),\n            greenLayerControls.start({ x: 0, y: 0 })\n        ]);\n\n        setTimeout(() => setIsGlitching(false), glitchDuration);\n    }\n\n    return (\n        <Button\n            className={cn(\n                \"min-w-40 relative overflow-hidden\",\n                \"bg-cyan-50 dark:bg-cyan-950\",\n                \"hover:bg-cyan-100 dark:hover:bg-cyan-900\",\n                \"text-cyan-600 dark:text-cyan-300\",\n                \"border border-cyan-200 dark:border-cyan-800\",\n                \"transition-colors duration-300\",\n                isGlitching && \"animate-pulse\",\n                className\n            )}\n            onClick={triggerGlitch}\n            {...props}\n        >\n            {/* RGB Text Layers */}\n            {[\"red\", \"green\", \"blue\"].map((color, index) => (\n                <motion.span\n                    key={color}\n                    animate={[redLayerControls, greenLayerControls, blueLayerControls][index]}\n                    className={cn(\n                        \"absolute inset-0 flex items-center justify-center gap-2\",\n                        \"mix-blend-screen\",\n                        color === \"red\" && \"text-red-500\",\n                        color === \"green\" && \"text-green-500\",\n                        color === \"blue\" && \"text-blue-500\"\n                    )}\n                >\n                    <Zap className=\"w-4 h-4\" />\n                    {isGlitching ? \"ERR0R\" : \"Click me\"}\n                </motion.span>\n            ))}\n            \n            {/* Base Text Layer */}\n            <span className=\"relative z-10 w-full flex items-center justify-center gap-2 opacity-0\">\n                <Zap className=\"w-4 h-4\" />\n                {isGlitching ? \"ERR0R\" : \"Click me\"}\n            </span>\n        </Button>\n    );\n}\n",
      "path": "components/btn-05.tsx",
      "target": "components/components/btn-05.tsx"
    }
  ]
}