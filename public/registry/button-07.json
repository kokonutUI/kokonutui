{
  "name": "button-07",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { Download, Check, X } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Btn07Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    onProcess?: () => Promise<boolean>;\n    processDuration?: number;\n}\n\nexport function Btn07({\n    className,\n    onProcess,\n    processDuration = 2000,\n    ...props\n}: Btn07Props) {\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [isSuccess, setIsSuccess] = useState<boolean | null>(null);\n    const ringControls = useAnimation();\n    const scaleControls = useAnimation();\n\n    async function handleClick() {\n        if (isProcessing) return;\n\n        setIsProcessing(true);\n        setIsSuccess(null);\n\n        // Start the ring animation\n        await ringControls.start({\n            strokeDashoffset: 0,\n            transition: {\n                duration: processDuration / 1000,\n                ease: \"linear\",\n            },\n        });\n\n        // Process action if provided\n        const success = onProcess ? await onProcess() : true;\n        setIsSuccess(success);\n        setIsProcessing(false);\n\n        // Success/failure animation\n        await scaleControls.start({\n            scale: [1, 1.1, 1],\n            transition: { duration: 0.3 },\n        });\n\n        // Reset after delay\n        setTimeout(() => {\n            setIsSuccess(null);\n            ringControls.set({ strokeDashoffset: 157 }); // 2Ï€r where r = 25\n        }, 2000);\n    }\n\n    return (\n        <Button\n            className={cn(\n                \"min-w-40 relative group\",\n                \"bg-blue-50 dark:bg-blue-950\",\n                \"hover:bg-blue-100 dark:hover:bg-blue-900\",\n                \"text-blue-600 dark:text-blue-300\",\n                \"border border-blue-200 dark:border-blue-800\",\n                \"transition-all duration-300\",\n                isProcessing && \"cursor-wait\",\n                className\n            )}\n            onClick={handleClick}\n            disabled={isProcessing}\n            {...props}\n        >\n            <motion.div\n                animate={scaleControls}\n                className=\"w-full flex items-center justify-center gap-2\"\n            >\n                {isSuccess === null ? (\n                    <>\n                        <Download\n                            className={cn(\n                                \"w-4 h-4 transition-transform duration-200\",\n                                \"group-hover:scale-110\",\n                                isProcessing && \"animate-bounce\"\n                            )}\n                        />\n                        <span>\n                            {isProcessing ? \"Processing...\" : \"Download\"}\n                        </span>\n                    </>\n                ) : isSuccess ? (\n                    <>\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"text-green-500\">Complete!</span>\n                    </>\n                ) : (\n                    <>\n                        <X className=\"w-4 h-4 text-red-500\" />\n                        <span className=\"text-red-500\">Failed</span>\n                    </>\n                )}\n            </motion.div>\n\n            {/* Progress ring */}\n            {isProcessing && (\n                <svg\n                    className=\"absolute inset-0 w-full h-full -rotate-90\"\n                    viewBox=\"0 0 50 50\"\n                >\n                    <motion.circle\n                        initial={{ strokeDashoffset: 157 }}\n                        animate={ringControls}\n                        className=\"text-blue-500\"\n                        cx=\"25\"\n                        cy=\"25\"\n                        r=\"23\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeDasharray=\"157\"\n                    />\n                </svg>\n            )}\n        </Button>\n    );\n}\n",
      "path": "components/btn-07.tsx",
      "target": "components/components/btn-07.tsx"
    }
  ]
}