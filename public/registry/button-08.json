{
  "name": "button-08",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Twitter, Facebook, Linkedin, Link } from \"lucide-react\";\n\nexport function Btn08({\n    className,\n    ...props\n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    const [isHovered, setIsHovered] = useState(false);\n    const buttonWidth = 160;\n    const smallButtonWidth = buttonWidth / 4;\n\n    const shareButtons = [\n        { icon: Twitter },\n        { icon: Facebook },\n        { icon: Linkedin },\n        { icon: Link },\n    ];\n\n    const buttonVariants = {\n        initial: {\n            width: smallButtonWidth,\n            x: 0,\n            opacity: 0,\n        },\n        animate: (custom: number) => ({\n            width: smallButtonWidth,\n            x: custom * smallButtonWidth,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 300,\n                damping: 25,\n                mass: 1,\n            },\n        }),\n        exit: {\n            width: smallButtonWidth,\n            x: buttonWidth / 2,\n            opacity: 0,\n            transition: {\n                duration: 0.2,\n            },\n        },\n    };\n\n    return (\n        <div\n            className=\"relative\"\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            <Button\n                className={cn(\n                    \"min-w-40 relative\",\n                    \"bg-white dark:bg-black\",\n                    \"hover:bg-gray-50 dark:hover:bg-gray-950\",\n                    \"text-black dark:text-white\",\n                    \"border border-black/10 dark:border-white/10\",\n                    \"transition-all duration-300 border\",\n                    isHovered && \"opacity-0\",\n                    className\n                )}\n                {...props}\n            >\n                <span className=\"flex items-center gap-2\">\n                    <Link className=\"w-4 h-4\" />\n                    Share\n                </span>\n            </Button>\n\n            <AnimatePresence>\n                {isHovered &&\n                    shareButtons.map((button, index) => (\n                        <motion.button\n                            key={index}\n                            custom={index}\n                            variants={buttonVariants}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                            exit=\"exit\"\n                            className={cn(\n                                \"absolute top-0 left-0 h-full\",\n                                \"flex items-center justify-center\",\n                                \"bg-black dark:bg-white\",\n                                \"text-white dark:text-black\",\n                                \"transition-colors duration-200\",\n                                index === 0 && \"rounded-l-md\",\n                                index === 3 && \"rounded-r-md\",\n                                \"border-r border-white/10 dark:border-black/10\",\n                                \"hover:bg-gray-900 dark:hover:bg-gray-100\"\n                            )}\n                        >\n                            <button.icon className=\"w-4 h-4\" />\n                        </motion.button>\n                    ))}\n            </AnimatePresence>\n        </div>\n    );\n}\n",
      "path": "components/btn-08.tsx",
      "target": "components/components/btn-08.tsx"
    }
  ]
}