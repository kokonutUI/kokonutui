{
  "name": "button-04",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { Droplets } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\n\ninterface Btn04Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    blobSize?: number;\n    blobColor?: string;\n}\n\nexport function Btn04({\n    className,\n    blobSize = 80,\n    blobColor = \"rgba(147, 51, 234, 0.3)\", // Purple\n    ...props\n}: Btn04Props) {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const [isHovering, setIsHovering] = useState(false);\n    const blobControls = useAnimation();\n    const [coords, setCoords] = useState({ x: 0, y: 0 });\n\n    function handleMouseMove(e: React.MouseEvent<HTMLButtonElement>) {\n        if (!buttonRef.current) return;\n        \n        const rect = buttonRef.current.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        \n        setCoords({ x, y });\n        blobControls.start({\n            x: x - blobSize / 2,\n            y: y - blobSize / 2,\n            transition: {\n                type: \"spring\",\n                damping: 15,\n                stiffness: 200,\n            },\n        });\n    }\n\n    function handleMouseEnter() {\n        setIsHovering(true);\n        blobControls.start({\n            scale: 1,\n            opacity: 1,\n            transition: { duration: 0.2 },\n        });\n    }\n\n    function handleMouseLeave() {\n        setIsHovering(false);\n        blobControls.start({\n            scale: 0,\n            opacity: 0,\n            transition: { duration: 0.2 },\n        });\n    }\n\n    // Initialize blob position in center\n    useEffect(() => {\n        if (buttonRef.current) {\n            const rect = buttonRef.current.getBoundingClientRect();\n            setCoords({\n                x: rect.width / 2,\n                y: rect.height / 2,\n            });\n        }\n    }, []);\n\n    return (\n        <Button\n            ref={buttonRef}\n            className={cn(\n                \"min-w-40 relative overflow-hidden\",\n                \"bg-purple-50 dark:bg-purple-950\",\n                \"hover:bg-purple-100 dark:hover:bg-purple-900\",\n                \"text-purple-600 dark:text-purple-300\",\n                \"border border-purple-200 dark:border-purple-800\",\n                \"transition-colors duration-300\",\n                className\n            )}\n            onMouseMove={handleMouseMove}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            {...props}\n        >\n            <motion.div\n                initial={{ scale: 0, opacity: 0 }}\n                animate={blobControls}\n                style={{\n                    width: blobSize,\n                    height: blobSize,\n                    backgroundColor: blobColor,\n                }}\n                className={cn(\n                    \"absolute rounded-full\",\n                    \"blur-xl\",\n                    \"pointer-events-none\"\n                )}\n            />\n            <span className=\"relative z-10 w-full flex items-center justify-center gap-2\">\n                <Droplets className={cn(\n                    \"w-4 h-4 transition-transform duration-300\",\n                    isHovering && \"scale-110\"\n                )} />\n                {isHovering ? \"Splish splash\" : \"Hover me\"}\n            </span>\n        </Button>\n    );\n}\n",
      "path": "components/btn-04.tsx",
      "target": "components/components/btn-04.tsx"
    }
  ]
}