{
  "name": "ai-input-16",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport {\n    ArrowRight,\n    Image as ImageIcon,\n    Command,\n    MessageSquare,\n    Eraser,\n    Sparkles,\n} from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\n\nconst MODES = {\n    command: {\n        icon: Command,\n        placeholder: \"Type / for suggestions...\",\n        color: \"gray\",\n    },\n    chat: {\n        icon: MessageSquare,\n        placeholder: \"Chat with AI...\",\n        color: \"blue\",\n    },\n    image: {\n        icon: ImageIcon,\n        placeholder: \"Describe the image you want to generate...\",\n        color: \"purple\",\n    },\n};\n\ntype ModeType = keyof typeof MODES;\n\nexport default function AIInput_16() {\n    const [inputState, setInputState] = useState({\n        value: \"\",\n        activeMode: \"command\" as ModeType,\n        suggestions: [] as string[],\n        activeCommand: null as string | null,\n    });\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const newValue = e.target.value;\n        const commands = [\"/translate\", \"/summarize\", \"/explain\", \"/review\"];\n\n        if (!inputState.activeCommand && newValue.startsWith(\"/\")) {\n            const exactMatch = commands.find(\n                (cmd) => cmd === newValue.toLowerCase()\n            );\n            if (exactMatch) {\n                setInputState((prev) => ({\n                    ...prev,\n                    value: \"\",\n                    activeCommand: exactMatch,\n                    suggestions: [],\n                }));\n                return;\n            }\n\n            const matchingCommands = commands.filter((cmd) =>\n                cmd.toLowerCase().startsWith(newValue.toLowerCase())\n            );\n            setInputState((prev) => ({\n                ...prev,\n                value: newValue,\n                suggestions: matchingCommands,\n            }));\n        } else {\n            setInputState((prev) => ({\n                ...prev,\n                value: newValue,\n                suggestions: [],\n            }));\n        }\n    };\n\n    const handleSuggestionClick = (suggestion: string) => {\n        setInputState((prev) => ({\n            ...prev,\n            activeCommand:\n                prev.activeCommand === suggestion ? null : suggestion,\n            value: \"\",\n            suggestions: [],\n        }));\n        textareaRef.current?.focus();\n    };\n\n    const handleClear = () => {\n        setInputState((prev) => ({\n            ...prev,\n            value: \"\",\n            activeCommand: null,\n            suggestions: [],\n        }));\n        textareaRef.current?.focus();\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            handleClear();\n        }\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"bg-black/5 dark:bg-white/5 rounded-xl p-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                    {Object.entries(MODES).map(([mode, { icon: Icon }]) => (\n                        <button\n                            type=\"button\"\n                            key={mode}\n                            onClick={() =>\n                                setInputState((prev) => ({\n                                    ...prev,\n                                    activeMode: mode as any,\n                                }))\n                            }\n                            className={cn(\n                                \"p-2 rounded-lg transition-all flex items-center gap-2\",\n                                {\n                                    \"bg-black/5 dark:bg-white/5 text-black dark:text-white\":\n                                        inputState.activeMode === mode,\n                                    \"text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white\":\n                                        inputState.activeMode !== mode,\n                                }\n                            )}\n                        >\n                            <Icon className=\"w-4 h-4\" />\n                        </button>\n                    ))}\n                </div>\n\n                <div className=\"relative\">\n                    <Textarea\n                        ref={textareaRef}\n                        value={inputState.value}\n                        onChange={handleInputChange}\n                        onKeyDown={handleKeyDown}\n                        placeholder={MODES[inputState.activeMode].placeholder}\n                        className=\"w-full rounded-xl px-4 py-3 pb-8 bg-black/5 dark:bg-white/5 border-none dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70 resize-none focus-visible:ring-0 focus-visible:ring-offset-0 min-h-[40px]\"\n                    />\n\n                    {inputState.suggestions.length > 0 && (\n                        <div className=\"absolute left-0 right-0 bottom-full mb-2 bg-black dark:bg-black rounded-lg shadow-lg border border-white/10 overflow-hidden z-50\">\n                            {inputState.suggestions.map((suggestion) => (\n                                <button\n                                    type=\"button\"\n                                    key={suggestion}\n                                    onClick={() =>\n                                        handleSuggestionClick(suggestion)\n                                    }\n                                    className=\"w-full text-left px-3 py-2.5 hover:bg-white/10 text-sm flex items-center gap-2\"\n                                >\n                                    <Sparkles className=\"w-4 h-4 text-white/50\" />\n                                    <span className=\"font-medium text-white/70\">\n                                        {suggestion}\n                                    </span>\n                                </button>\n                            ))}\n                        </div>\n                    )}\n\n                    <div className=\"absolute bottom-3 w-full px-3 flex justify-between items-center\">\n                        <div className=\"flex items-center gap-2\">\n                            {inputState.activeCommand && (\n                                <button\n                                    type=\"button\"\n                                    onClick={() =>\n                                        handleSuggestionClick(\n                                            inputState.activeCommand as string\n                                        )\n                                    }\n                                    className=\"group bg-black/5 dark:bg-white/5 hover:bg-black/10 dark:hover:bg-white/10 text-black dark:text-white rounded-md px-2 py-1 text-sm font-mono flex items-center gap-1.5 transition-colors\"\n                                >\n                                    {inputState.activeCommand}\n                                    <span className=\"text-black/40 dark:text-white/40 group-hover:text-black dark:group-hover:text-white\">\n                                        Ã—\n                                    </span>\n                                </button>\n                            )}\n                            {(inputState.value || inputState.activeCommand) && (\n                                <button\n                                    type=\"button\"\n                                    className=\"p-2 hover:bg-black/5 dark:hover:bg-white/5 rounded-lg text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white transition-colors\"\n                                    onClick={handleClear}\n                                >\n                                    <Eraser className=\"w-4 h-4\" />\n                                </button>\n                            )}\n                        </div>\n                        <button\n                            type=\"button\"\n                            className={cn(\n                                \"p-2 rounded-lg transition-all\",\n                                inputState.value.trim().length > 0 ||\n                                    inputState.activeCommand\n                                    ? \"bg-black/10 dark:bg-white/10 text-black dark:text-white\"\n                                    : \"bg-black/5 dark:bg-white/5 text-black/30 dark:text-white/30\"\n                            )}\n                        >\n                            <ArrowRight className=\"w-4 h-4\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "ui/ai-input-16.tsx",
      "target": "components/ui/ai-input-16.tsx"
    }
  ]
}