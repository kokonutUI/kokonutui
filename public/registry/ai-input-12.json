{
  "name": "ai-input-12",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea",
    "tooltip"
  ],
  "files": [
    {
      "content": "\"use client\";\n\nimport { ArrowRight } from \"lucide-react\";\nimport { useState, useRef } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n    Tooltip,\n    TooltipContent,\n    TooltipProvider,\n    TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\n\nconst AVATARS = Array.from({ length: 4 }, (_, i) => ({\n    src: `/av${String(i + 1).padStart(2, \"0\")}.png`,\n    nickname: [\"Eugene\", \"Ben\", \"Sarah\", \"Dorian\"][i],\n}));\n\nexport default function AIInput_12() {\n    const [value, setValue] = useState(\"\");\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            setValue(\"\");\n        }\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"flex flex-col\">\n                <div className=\"flex items-center bg-white/50 dark:bg-transparent backdrop-blur-sm px-2 justify-between\">\n                    <div className=\"text-xs text-black/50 dark:text-white/50\">\n                        Shared with 4 peoples\n                    </div>\n                    <div>\n                        <div className=\"inline-flex items-center justify-center\">\n                            <TooltipProvider delayDuration={0}>\n                                {AVATARS.map((avatar, i) => (\n                                    <Tooltip key={i}>\n                                        <TooltipTrigger asChild>\n                                            <div\n                                                className=\"relative w-8 h-8 hover:z-10 cursor-pointer\"\n                                                style={{\n                                                    marginLeft:\n                                                        i > 0 ? \"-8px\" : \"0\",\n                                                }}\n                                            >\n                                                <img\n                                                    src={avatar.src}\n                                                    alt={`Avatar ${i + 1}`}\n                                                    className=\"w-full h-full object-cover rounded-full border-[1.5px] border-white dark:border-none bg-white dark:bg-transparent ring-2 ring-black/5 dark:ring-0\"\n                                                />\n                                            </div>\n                                        </TooltipTrigger>\n                                        <TooltipContent className=\"dark:bg-black/80 dark:text-white dark:border-white/10\">\n                                            <p>{avatar.nickname}</p>\n                                        </TooltipContent>\n                                    </Tooltip>\n                                ))}\n                            </TooltipProvider>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"bg-black/5 dark:bg-white/5 rounded-xl\">\n                    <div className=\"relative px-2 py-2\">\n                        <Textarea\n                            value={value}\n                            ref={textareaRef}\n                            placeholder=\"Type your message...\"\n                            className=\"w-full rounded-xl px-4 border-none resize-none bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70 min-h-[40px]\"\n                            rows={1}\n                            onKeyDown={handleKeyDown}\n                            onChange={(e) => {\n                                setValue(e.target.value);\n\n                                if (textareaRef.current) {\n                                    textareaRef.current.style.height = \"auto\";\n                                    textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n                                }\n                            }}\n                        />\n\n                        <button\n                            type=\"button\"\n                            className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1\"\n                        >\n                            <ArrowRight\n                                className={cn(\n                                    \"w-4 h-4 dark:text-white\",\n                                    value ? \"opacity-100\" : \"opacity-30\"\n                                )}\n                            />\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"text-xs text-black/50 dark:text-white/50 px-2 py-1\">\n                    {`${AVATARS[0].nickname}, ${AVATARS[2].nickname}${\n                        value ? ` and ${AVATARS[3].nickname}` : \"\"\n                    } are writing...`}\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/ai-input-12.tsx",
      "target": "components/components/ai-input-12.tsx"
    }
  ]
}